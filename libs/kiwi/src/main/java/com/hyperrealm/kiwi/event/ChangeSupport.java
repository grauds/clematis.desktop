/* ----------------------------------------------------------------------------
   The Kiwi Toolkit - A Java Class Library
   Copyright (C) 1998-2008 Mark A. Lindner

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this library; if not, see <http://www.gnu.org/licenses/>.
   ----------------------------------------------------------------------------
*/

package com.hyperrealm.kiwi.event;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;

/**
 * A support object for generating <code>ChangeEvent</code>s.
 *
 * @author Mark Lindner
 * @see javax.swing.event.ChangeEvent
 * @see javax.swing.event.ChangeListener
 */

public class ChangeSupport {

    private final EventListenerList listeners;

    private final Object source;

    /**
     * Construct a new <code>ChangeSupport</code> object.
     *
     * @param source The owner of this object (and the source of the events that
     *               will be generated by it).
     */

    public ChangeSupport(Object source) {
        this.source = source;
        listeners = new EventListenerList();
    }

    /**
     * Add a <code>ChangeListener</code> to this object's list of listeners.
     *
     * @param listener The listener to add.
     */

    public void addChangeListener(ChangeListener listener) {
        listeners.add(ChangeListener.class, listener);
    }

    /**
     * Remove a <code>ChangeListener</code> from this object's list of
     * listeners.
     *
     * @param listener The listener to remove.
     */

    public void removeChangeListener(ChangeListener listener) {
        listeners.remove(ChangeListener.class, listener);
    }

    /**
     * Fire a change event.
     */

    public void fireChangeEvent() {
        ChangeEvent evt = null;

        Object[] list = listeners.getListenerList();

        for (int i = list.length - 2; i >= 0; i -= 2) {
            if (list[i] == ChangeListener.class) {
                // Lazily create the event:
                if (evt == null) {
                    evt = new ChangeEvent(source);
                }
                ((ChangeListener) list[i + 1]).stateChanged(evt);
            }
        }
    }

}
