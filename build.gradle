buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'jacoco-report-aggregation'

    id 'com.github.spotbugs' version '4.7.1'
    id 'org.asciidoctor.jvm.convert' version '3.1.0'
}

repositories {
    mavenCentral()
}

group 'org.clematis.desktop'
version '2.0.0-SNAPSHOT'

subprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'org.asciidoctor.jvm.convert'

    repositories {
        mavenCentral()
    }

    apply from: file("${project.rootDir}/dependencies.gradle")

    sourceCompatibility = '17'
    targetCompatibility = '17'


// ------------ JaCoCo configuration  ---------
    ext {
        setProperty('snippetsDir', file("build/generated-snippets"))
    }

    test {
        outputs.dir snippetsDir
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        jacoco {
            destinationFile = file("jacoco/jacocoTest.exec")
            classDumpDir = file("jacoco/classpathdumps")
        }
    }

    jacocoTestReport {
        reports {
            xml.required = true
            csv.required = false
            html.outputLocation = file('jacoco/html')
            xml.outputLocation = file('jacoco/jacoco.xml')
        }
        allprojects.each {
            sourceSets it.sourceSets.main
        }
        executionData fileTree(project.rootDir.absolutePath).include("jacoco/*.exec")
    }

    jacocoTestReport.dependsOn test
    test.finalizedBy jacocoTestReport

    asciidoctor {
        inputs.dir snippetsDir
        dependsOn test
    }

    jar {
        //archiveFileName = "${archiveBaseName}.${archiveExtension}"
        manifest {
            attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": archiveVersion
            )
        }
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

// ------------ Spotbugs configuration  ---------
    spotbugsMain {
        reports {
            xml {
                enabled = false
            }
            html {
                enabled = true
                destination = file("${project.buildDir}/reports/spotbugs/main/spotbugs.html")
            }
        }
    }

    spotbugsTest {
        reports {
            xml {
                enabled = false
            }
            html {
                enabled = true
                destination = file("${project.buildDir}/reports/spotbugs/test/spotbugs.html")
            }
        }
    }

// ------------ Checkstyle configuration  ---------
    checkstyle {
        configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
    }

    tasks.register('checkstyleReport') {
        doLast {
            if (file("${project.buildDir}/reports/checkstyle/${project.ext.checkType}.xml").exists()) {
                ant.xslt(in: "${project.buildDir}/reports/checkstyle/${project.ext.checkType}.xml",
                        style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                        out: "${project.buildDir}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
            }
        }
    }

    tasks.withType(Checkstyle).tap {
        configureEach {
            exclude '**/*Test*'
        }
    }
}

dependencies {
    jacocoAggregation project(':api')
    jacocoAggregation project(':kiwi')
    jacocoAggregation project(':installer')
}

reporting {
    reports {
        testCodeCoverageReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}
