buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'jacoco-report-aggregation'
    id 'com.github.spotbugs' version '6.0.7'
}

repositories {
    mavenCentral()
}

group 'org.clematis.desktop'
version '2.0.0-SNAPSHOT'

subprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'

    repositories {
        mavenCentral()
    }

    sourceCompatibility = '17'
    targetCompatibility = '17'

    dependencies {

        annotationProcessor "org.projectlombok:lombok:1.18.28"
        checkstyle "com.puppycrawl.tools:checkstyle:10.9.1"

        compileOnly "com.github.spotbugs:spotbugs:4.7.3"
        compileOnly "com.google.code.findbugs:annotations:3.0.1u2"
        compileOnly "org.projectlombok:lombok:1.18.28"

        testAnnotationProcessor "org.projectlombok:lombok:1.18.28"

        testCompileOnly "com.github.spotbugs:spotbugs:4.7.3"
        testCompileOnly "com.google.code.findbugs:annotations:3.0.1u2"
        testCompileOnly "org.projectlombok:lombok:1.18.26"

        testImplementation "junit:junit:4.13.2"
        testImplementation "org.junit.jupiter:junit-jupiter:5.10.0"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:5.10.0"
        testImplementation "org.mockito:mockito-core:5.4.0"
    }

// ------------ JaCoCo configuration  ---------
    ext {
        setProperty('snippetsDir', file("build/generated-snippets"))
    }

    test {
        outputs.dir snippetsDir
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        jacoco {
            destinationFile = file("jacoco/jacocoTest.exec")
            classDumpDir = file("jacoco/classpathdumps")
        }
    }

    jacocoTestReport {
        reports {
            xml.required = true
            csv.required = false
            html.outputLocation = file('jacoco/html')
            xml.outputLocation = file('jacoco/jacoco.xml')
        }
        allprojects.each {
            sourceSets it.sourceSets.main
        }
        executionData fileTree(project.rootDir.absolutePath).include("jacoco/*.exec")
    }

    jacocoTestReport.dependsOn test
    test.finalizedBy jacocoTestReport

    jar {
        //archiveFileName = "${archiveBaseName}.${archiveExtension}"
        manifest {
            attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": archiveVersion
            )
        }
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

// ------------ Spotbugs configuration  ---------
    spotbugsMain {
        reports {
            xml {
                required = false
            }
            html {
                required = true
            }
        }
        ignoreFailures = true;
    }

    spotbugsTest {
        reports {
            xml {
                required = false
            }
            html {
                required = true
            }
        }
        ignoreFailures = true;
    }

// ------------ Checkstyle configuration  ---------

    checkstyle {
        configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
    }

    tasks.register('checkstyleReport') {
        doLast {
            if (file("${project.buildDir}/reports/checkstyle/${project.ext.checkType}.xml").exists()) {
                ant.xslt(in: "${project.buildDir}/reports/checkstyle/${project.ext.checkType}.xml",
                        style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                        out: "${project.buildDir}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
            }
        }
    }

    tasks.withType(Checkstyle).tap {
        configureEach {
            exclude '**/*Test*'
        }
    }
}

dependencies {
    jacocoAggregation project(':api')
    jacocoAggregation project(':kiwi')
    jacocoAggregation project(':installer')
    jacocoAggregation project(':runtime')
    jacocoAggregation project(':profiles')
    jacocoAggregation project(':ui')
}



