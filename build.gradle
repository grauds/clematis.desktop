buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'com.github.spotbugs' version '4.7.1'
    id 'jacoco'
}

group 'name.troshin.anton.clematis'
version '2.0.0-SNAPSHOT'

import com.github.spotbugs.snom.SpotBugsReport
import com.github.spotbugs.snom.SpotBugsTask

subprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    apply from: file("${project.rootDir}/dependencies.gradle")

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    sourceCompatibility = '11'
    targetCompatibility = '11'

    test {
        jacoco {
            destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
            classDumpDir = file("$buildDir/jacoco/classpathdumps")
        }
    }

    compileJava {
        options.compilerArgs << '-XDenableSunApiLintControl'
    }

    task codeCoverageReport(type: JacocoReport) {
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

        allprojects.each {
            sourceSets it.sourceSets.main
        }

        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco/report.xml")
            html.enabled true
            csv.enabled false
        }
    }

// always run the tests before generating the report
    codeCoverageReport.dependsOn {
        subprojects.test
    }

    jar {
       // archiveFileName = "${archiveBaseName}.${archiveExtension}"

        manifest {
            attributes(
                    "Implementation-Title": project.name,
                    "Implementation-Version": archiveVersion
            )
        }
    }

    tasks.withType(SpotBugsTask) {
        excludeFilter = file("$rootProject.projectDir/tool/findbugs/exclude.xml")
        reports({
            html {
                enabled = !findbugsXml
                destination file("${buildDir}/reports/findbugs/findbugs.html")
            }
            xml {
                enabled = findbugsXml
            }
        } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>)
    }

    checkstyle {
        configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
    }

    task checkstyleReport {
        doLast {
            if (file("${buildDir}/reports/checkstyle/${checkType}.xml").exists()) {
                ant.xslt(in: "${buildDir}/reports/checkstyle/${project.ext.checkType}.xml",
                        style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                        out: "${buildDir}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
            }
        }
    }

    tasks.withType(Checkstyle) {
        exclude '**/*Test*'
    }

    build {
        dependsOn tasks.codeCoverageReport
    }
}
